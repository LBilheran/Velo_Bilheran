#version 330 core

struct SpotLight {
    vec3 position;      // Position de la lumière
    vec3 direction;     // Direction de la lumière
    float power;        // Puissance de la lumière
    vec3 color;         // Couleur de la lumière
    float cutoff;       // Cosinus de l'angle d'ouverture
    float outerCutoff;  // Cosinus de l'angle externe pour un adoucissement
};


in vec2 UV;
in vec3 fragPos;
in vec3 normal;
in vec3 lightDir;
in vec3 viewDir;

uniform sampler2D myTextureSampler;
uniform vec3 ambientLightColor; // Lumière ambiante (cycle jour/nuit)
uniform SpotLight u_SpotLight; // Lumière ponctuelle

out vec3 color;

void main() {
    vec3 textureColor = texture(myTextureSampler, UV).rgb;

    // Normalisation des vecteurs
    vec3 N = normalize(normal);
    vec3 L = normalize(lightDir);
    vec3 V = normalize(viewDir);

    // Distance entre la lumière et le fragment
    float distance = length(lightDir);
    float attenuation = 1.0 / (distance * distance);

    // Calcul du cône de lumière
    float theta = dot(L, normalize(-u_SpotLight.direction)); // Cosinus de l'angle entre la lumière et le fragment
    float epsilon = u_SpotLight.cutoff - u_SpotLight.outerCutoff;
    float intensity = clamp((theta - u_SpotLight.outerCutoff) / epsilon, 0.0, 1.0); // Transition douce

    // Si en dehors du cône, aucune lumière n'est appliquée
    if (theta < u_SpotLight.outerCutoff) {
        color = ambientLightColor * textureColor;
        return;
    }

    // Composante diffuse
    float diff = max(dot(N, L), 0.0);
    vec3 diffuse = diff * u_SpotLight.color * u_SpotLight.power;

    // Composante spéculaire
    vec3 R = reflect(-L, N);
    float spec = pow(max(dot(R, V), 0.0), 5.0);
    vec3 specular = spec * u_SpotLight.color * u_SpotLight.power;

    // Lumière finale
    vec3 spotlightEffect = (diffuse + specular) * intensity * attenuation;
    vec3 ambient = ambientLightColor * textureColor;

    color = ambient + spotlightEffect;
}

